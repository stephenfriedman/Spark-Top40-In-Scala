//STEPHEN A. FRIEDMAN
//CSE 398
//P5
//DEC. 2015
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import scala.util.parsing.combinator._
object firstSparkProj extends RegexParsers{
def main(args: Array[String]) {
val sc = new SparkContext("local[4]", "first spark app")

def artist: Parser[String] = """(')([^']*)(')""".r ^^ {_.toString}
def song: Parser[String] = """(')([^']*)(')""".r ^^ {_.toString}
def count: Parser[Int] = """[\d]*""".r ^^ {_.toInt}

def all: Parser[Tuple3[String,String,Int]] = artist ~ ", " ~ song ~ ", " ~ count ^^ {
case artist ~ ", " ~ song ~ ", " ~ count => new Tuple3(artist.replaceAll("'",""),song.replaceAll("'",""),count)
}

def doParse(someText:String): Tuple3[String,String,Int] =
{
 parse(all, someText) match
 {
  case Success(matched,_) => matched
  case Failure(badTuple,_)=> ("","",-1)
 }
}

val data = sc.textFile("data/songList.txt").map(line => line.substring(line.indexOf("'"),line.length-2)).map(songInfo => doParse(songInfo))

val trivialWords = List("","THE","YOU","I","A","ME","TO","OF","MY","IN","AND","ON","IT","YOUR","BE","IS","FOR","I*M")

val songs=data.map{case (a,s,c)=> s.replaceAll(",","").trim}
val songsWith1Count=data.map{case (a,s,c)=> (s.replaceAll(",","").trim,c)}.reduceByKey(_+_)

val totalWordCount = songs.flatMap{song=>song.replaceAll("""[\p{Punct}&&[^.|*]]""","").split(" ")}.map{case (word)=> if(!trivialWords.contains(word)){word}else{" "}}.filter(!_.contains(" ")).map{word => (word,1)}.reduceByKey(_+_).sortBy(-_._2)

totalWordCount.take(100).foreach(println)

println("TOTAL NON TRIVIAL WORD COUNT IS:"+totalWordCount.count)

var artists=data.map{case (a,s,c)=> a.replaceAll(",","").trim}.map{case (a) => (a,1)}.reduceByKey(_+_).sortBy(-_._2)
artists.take(10).foreach(println)

var num1SongCountByArtist=data.map{case (a,s,c)=> if(c>0){(a,1)}else{(" ",0)}}.reduceByKey(_+_).sortBy(-_._2)
num1SongCountByArtist.foreach(println)

var top15words = totalWordCount.take(15)
top15words.foreach{x=>
val word = x._1
val count = x._2
//val songsWithWord = data.map{case (a,s,c) => if(s.split(" ").contains(word)){(s,c)}else{(" ",0)}}.filter(!_._1.contains(" "))
val songsWithWord = songsWith1Count.map{case(s,c)=>(s.replaceAll("""[\p{Punct}&&[^.|*]]""",""),c)}.filter(_._1.split(" ").contains(word))
var songsWithWordAndNum1=songsWithWord.map{case (s,c)=> if(c==1){(s,c)}else{("!!!",0)}}.filter(!_._1.contains("!!!"))
var probSongNum1GivenAWord=((songsWithWordAndNum1.count).toDouble/(songsWithWord.count).toDouble).toDouble*100
println("Probability of a song being #1 given it has the word: "+ word +" = "+probSongNum1GivenAWord+"%");
var num1Songs = songsWith1Count.map{case(s,c)=>if(c>=1){(s,c)}else{("!!!",0)}}.filter(!_._1.contains("!!!"))  
num1Songs.foreach(println)
println("TOTAL NUM1SONGS: "+num1Songs.count)
var probSongContainsWordGivenASongBeingNum1=((songsWithWordAndNum1.count).toDouble/(num1Songs.count).toDouble).toDouble*100
println("Probability of a song containing the word: "+ word +" given a song being #1"+" = "+probSongContainsWordGivenASongBeingNum1+"%");
}
sc.stop()
}
}